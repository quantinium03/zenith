---
---
<div class="fixed top-0 left-0 w-full h-full z-[-1]">
    <canvas id="starfield" class="w-full h-full"></canvas>
</div>

<style>
    #starfield {
        background: #000000;
    }
</style>

<script>
  import * as THREE from 'three';

  const scene = new THREE.Scene();
  const camera = new THREE.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 0.1, 10000);
  const renderer = new THREE.WebGLRenderer({
    canvas: document.getElementById('starfield'),
    alpha: true
  });
  renderer.setSize(window.innerWidth, window.innerHeight);

  const starGeometry = new THREE.BufferGeometry();
  const starCount = 5000;
  const positions = new Float32Array(starCount * 3);
  for (let i = 0; i < starCount * 3; i++) {
      positions[i] = (Math.random() - 0.5) * 5000;
  }
  starGeometry.setAttribute('position', new THREE.BufferAttribute(positions, 3));
  const starMaterial = new THREE.PointsMaterial({
    color: 0xffffff,
    size: 2,
    transparent: true,
    opacity: 0.8
  });
  const stars = new THREE.Points(starGeometry, starMaterial);
  scene.add(stars);

  camera.position.z = 1000;
  camera.lookAt(0, 0, 0);

  function animate() {
    requestAnimationFrame(animate);

    const starPositions = stars.geometry.attributes.position.array;
    for (let i = 2; i < starPositions.length; i += 3) {
        starPositions[i] -= 1;
      if (starPositions[i] < -2500) starPositions[i] = 2500;
    }
    stars.geometry.attributes.position.needsUpdate = true;

    stars.rotation.x += 0.0002;
    stars.rotation.y += 0.0002;

    renderer.render(scene, camera);
  }

  window.addEventListener('resize', () => {
    camera.aspect = window.innerWidth / window.innerHeight;
    camera.updateProjectionMatrix();
    renderer.setSize(window.innerWidth, window.innerHeight);
  });

  animate();
</script>

