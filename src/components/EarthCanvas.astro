---
const { class: className } = Astro.props; // Allow custom classes if needed
---

<div class="earth-container relative w-full md:absolute md:top-1/2 md:right-0 md:-translate-y-1/2 z-0 md:z-10">
  <canvas id="earth-canvas" class="w-full h-full ml-0 lg:ml-[500px]"></canvas>
</div>

<script>
  import * as THREE from 'three';

  document.addEventListener('DOMContentLoaded', () => {
    const canvas = document.getElementById('earth-canvas');
    if (!canvas) return;

    const container = canvas.parentElement;
    const width = container.clientWidth;
    const height = container.clientHeight;

    const scene = new THREE.Scene();
    const camera = new THREE.PerspectiveCamera(75, width / height, 0.1, 1000);
    const renderer = new THREE.WebGLRenderer({ 
      canvas, 
      alpha: true, 
      antialias: true 
    });
    renderer.setSize(width, height);

    const textureLoader = new THREE.TextureLoader();

    // Earth
    const earthGroup = new THREE.Group();
    const earthGeometry = new THREE.SphereGeometry(1, 64, 64);
    const earthMaterial = new THREE.MeshPhongMaterial({
      map: textureLoader.load('/earth.jpg'),
      shininess: 10
    });
    const earth = new THREE.Mesh(earthGeometry, earthMaterial);
    earthGroup.add(earth);

    const cloudGeometry = new THREE.SphereGeometry(1.02, 64, 64);
    const cloudMaterial = new THREE.MeshPhongMaterial({
      map: textureLoader.load('/clouds.jpg'),
      transparent: true,
      opacity: 0.5
    });
    const clouds = new THREE.Mesh(cloudGeometry, cloudMaterial);
    earthGroup.add(clouds);

    const atmosphereGeometry = new THREE.SphereGeometry(1.1, 64, 64);
    const atmosphereMaterial = new THREE.MeshPhongMaterial({
      color: 0xffffff,
      transparent: true,
      opacity: 0.1,
      side: THREE.BackSide
    });
    const atmosphere = new THREE.Mesh(atmosphereGeometry, atmosphereMaterial);
    earthGroup.add(atmosphere);
    earthGroup.position.set(0, 0, 0);
    scene.add(earthGroup);

    // Moon
    const moonGroup = new THREE.Group();
    const moonGeometry = new THREE.SphereGeometry(0.27, 32, 32);
    const moonMaterial = new THREE.MeshPhongMaterial({
      map: textureLoader.load('/moon.jpg'),
      shininess: 5
    });
    const moon = new THREE.Mesh(moonGeometry, moonMaterial);
    moonGroup.add(moon);
    moonGroup.position.set(2.2, 0, 0);
    scene.add(moonGroup);

    // Lighting
    const directionalLight = new THREE.DirectionalLight(0xffffff, 1);
    directionalLight.position.set(5, 3, 5).normalize();
    scene.add(directionalLight);

    const ambientLight = new THREE.AmbientLight(0x404040, 0.5);
    scene.add(ambientLight);

    // Responsive camera setup
    function updateCamera() {
      const isSmallScreen = window.innerWidth < 768;
      camera.position.z = isSmallScreen ? 4.5 : 3.5; // Further back to fit Moon orbit
      camera.position.y = isSmallScreen ? 1 : 0.5;
      camera.lookAt(0, 0, 0);
    }
    updateCamera();

    // Animation
    let time = 0;
    function animate() {
      requestAnimationFrame(animate);
      time += 0.01;

      earthGroup.rotation.y += 0.001;
      clouds.rotation.y += 0.0015;

      // Adjusted moon orbit radius to 2.5 to ensure it stays in view
      const moonOrbitRadius = 2.5;
      moonGroup.position.x = moonOrbitRadius * Math.cos(time * 0.5);
      moonGroup.position.z = moonOrbitRadius * Math.sin(time * 0.5);
      moon.rotation.y += 0.002;

      renderer.render(scene, camera);
    }

    // Handle resize
    window.addEventListener('resize', () => {
      const newWidth = container.clientWidth;
      const newHeight = container.clientHeight;
      renderer.setSize(newWidth, newHeight);
      camera.aspect = newWidth / newHeight;
      camera.updateProjectionMatrix();
      updateCamera();
    });

    animate();
  });
</script>

<style>
  .earth-container {
    transition: all 0.3s ease;
  }

  @media (max-width: 767px) {
    .earth-container {
      position: absolute;
      top: 0;
      left: 0;
      width: 100%;
      max-width: 100%;
      height: 100%;
      z-index: 0;
      margin: 0;
      transform: none;
    }
  }
</style>
