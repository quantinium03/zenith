<div class="earth-container">
  <canvas id="solar-canvas"></canvas>
</div>

<script type="module">
import * as THREE from 'https://unpkg.com/three@0.153.0/build/three.module.js';

document.addEventListener('DOMContentLoaded', () => {
  const canvas = document.getElementById('solar-canvas');
  if (!canvas) return;

  const container = canvas.parentElement;
  const width = container.clientWidth;
  const height = container.clientHeight;

  const scene = new THREE.Scene();
  const camera = new THREE.PerspectiveCamera(75, width / height, 0.1, 1000);
  const renderer = new THREE.WebGLRenderer({
    canvas,
    alpha: true,
    antialias: true
  });
  renderer.setSize(width, height);

  const textureLoader = new THREE.TextureLoader();

  // Earth setup
  const earthGroup = new THREE.Group();
  const earthGeometry = new THREE.SphereGeometry(0.8, 64, 64);
  const earthMaterial = new THREE.MeshPhongMaterial({
    map: textureLoader.load('/earth.jpg'),
    shininess: 10
  });
  const earth = new THREE.Mesh(earthGeometry, earthMaterial);
  earthGroup.add(earth);

  const cloudGeometry = new THREE.SphereGeometry(0.82, 64, 64);
  const cloudMaterial = new THREE.MeshPhongMaterial({
    map: textureLoader.load('/clouds.jpg'),
    transparent: true,
    opacity: 0.5
  });
  const clouds = new THREE.Mesh(cloudGeometry, cloudMaterial);
  earthGroup.add(clouds);

  const atmosphereGeometry = new THREE.SphereGeometry(0.9, 64, 64);
  const atmosphereMaterial = new THREE.MeshPhongMaterial({
    color: 0xADD8FF,
    transparent: true,
    opacity: 0.1,
    side: THREE.BackSide
  });
  const atmosphere = new THREE.Mesh(atmosphereGeometry, atmosphereMaterial);
  earthGroup.add(atmosphere);
  scene.add(earthGroup);

  // Mars setup
  const marsGroup = new THREE.Group();
  const marsGeometry = new THREE.SphereGeometry(0.5, 64, 64);
  const marsMaterial = new THREE.MeshPhongMaterial({
    map: textureLoader.load('/mars.jpg'),
    shininess: 5
  });
  const mars = new THREE.Mesh(marsGeometry, marsMaterial);
  marsGroup.add(mars);

  const marsAtmosphereGeometry = new THREE.SphereGeometry(0.53, 64, 64);
  const marsAtmosphereMaterial = new THREE.MeshPhongMaterial({
    color: 0xEE8D70,
    transparent: true,
    opacity: 0.05,
    side: THREE.BackSide
  });
  const marsAtmosphere = new THREE.Mesh(marsAtmosphereGeometry, marsAtmosphereMaterial);
  marsGroup.add(marsAtmosphere);
  scene.add(marsGroup);

  // Venus setup
  const venusGroup = new THREE.Group();
  const venusGeometry = new THREE.SphereGeometry(0.75, 64, 64);
  const venusMaterial = new THREE.MeshPhongMaterial({
    map: textureLoader.load('/venus.jpg'),
    shininess: 8
  });
  const venus = new THREE.Mesh(venusGeometry, venusMaterial);
  venusGroup.add(venus);

  const venusAtmosphereGeometry = new THREE.SphereGeometry(0.78, 64, 64);
  const venusAtmosphereMaterial = new THREE.MeshPhongMaterial({
    color: 0xFFD700,
    transparent: true,
    opacity: 0.15,
    side: THREE.BackSide
  });
  const venusAtmosphere = new THREE.Mesh(venusAtmosphereGeometry, venusAtmosphereMaterial);
  venusGroup.add(venusAtmosphere);
  scene.add(venusGroup);

  // Mercury setup
  const mercuryGroup = new THREE.Group();
  const mercuryGeometry = new THREE.SphereGeometry(0.3, 64, 64);
  const mercuryMaterial = new THREE.MeshPhongMaterial({
    map: textureLoader.load('/mercury.jpg'),
    shininess: 5
  });
  const mercury = new THREE.Mesh(mercuryGeometry, mercuryMaterial);
  mercuryGroup.add(mercury);
  scene.add(mercuryGroup);

  // Sun setup (fixed distortion)
  const sunGroup = new THREE.Group();
  const sunGeometry = new THREE.SphereGeometry(2, 64, 64);
  const sunMaterial = new THREE.MeshBasicMaterial({
    map: textureLoader.load('/sun.jpg'),
    // Removed emissive properties to avoid distortion
  });
  const sunMesh = new THREE.Mesh(sunGeometry, sunMaterial);
  sunGroup.add(sunMesh);
  sunGroup.position.set(-15, 8, 0);
  scene.add(sunGroup);

  // Lighting
  const directionalLight = new THREE.DirectionalLight(0xffffff, 0.5);
  directionalLight.position.set(-15, 8, 0).normalize();
  scene.add(directionalLight);

  const ambientLight = new THREE.AmbientLight(0x404040, 0.2);
  scene.add(ambientLight);

  camera.position.z = 12;

  let time = 0;

  // Orbital parameters
  const earthA = 8;
  const earthB = 3;
  const earthAngle = Math.PI / 6;
  const earthOffset = 1;

  const marsA = 10;
  const marsB = 3;
  const marsAngle = Math.PI / 6;
  const marsPhase = 0.5;

  const venusA = 6;
  const venusB = 2;
  const venusAngle = Math.PI / 6;
  const venusPhase = 0.3;

  const mercuryA = 4;
  const mercuryB = 1.5;
  const mercuryAngle = Math.PI / 6;
  const mercuryPhase = 0.2;

  // Axial tilts
  earth.rotation.x = THREE.MathUtils.degToRad(23.5);
  mars.rotation.x = THREE.MathUtils.degToRad(25.2);
  venus.rotation.x = THREE.MathUtils.degToRad(177.4); // Venus has retrograde rotation
  mercury.rotation.x = THREE.MathUtils.degToRad(0.03);

  function animate() {
    requestAnimationFrame(animate);

    time += 0.005;

    // Earth orbit
    const earthRawX = earthA * Math.cos(time);
    const earthRawY = earthB * Math.sin(time);
    const earthX = earthRawX * Math.cos(earthAngle) - earthRawY * Math.sin(earthAngle) + 1;
    const earthY = earthRawY * Math.cos(earthAngle) + earthRawX * Math.sin(earthAngle);
    earthGroup.position.set(earthX, earthY, 0);

    // Mars orbit
    const marsRawX = marsA * Math.cos(time * 0.7 + marsPhase);
    const marsRawY = marsB * Math.sin(time * 0.7 + marsPhase);
    const marsX = marsRawX * Math.cos(marsAngle) - marsRawY * Math.sin(marsAngle) + 3;
    const marsY = marsRawY * Math.cos(marsAngle) + marsRawX * Math.sin(marsAngle) - 4;
    marsGroup.position.set(marsX, marsY, 0);

    // Venus orbit
    const venusRawX = venusA * Math.cos(time * 1.2 + venusPhase);
    const venusRawY = venusB * Math.sin(time * 1.2 + venusPhase);
    const venusX = venusRawX * Math.cos(venusAngle) - venusRawY * Math.sin(venusAngle) - 5;
    const venusY = venusRawY * Math.cos(venusAngle) + venusRawX * Math.sin(venusAngle) + 3;
    venusGroup.position.set(venusX, venusY, 0);

    // Mercury orbit
    const mercuryRawX = mercuryA * Math.cos(time * 1.5 + mercuryPhase);
    const mercuryRawY = mercuryB * Math.sin(time * 1.5 + mercuryPhase);
    const mercuryX = mercuryRawX * Math.cos(mercuryAngle) - mercuryRawY * Math.sin(mercuryAngle) - 10 ;
    const mercuryY = mercuryRawY * Math.cos(mercuryAngle) + mercuryRawX * Math.sin(mercuryAngle) + 6
    mercuryGroup.position.set(mercuryX, mercuryY, 0);

    // Rotations
    earth.rotation.y += 0.01;
    clouds.rotation.y += 0.0115;
    mars.rotation.y += 0.0097;
    venus.rotation.y += 0.0004; // Slow rotation due to Venus's long day
    mercury.rotation.y += 0.0017; // Mercury's slow rotation
    sunMesh.rotation.z += 0.003;
    sunMesh.rotation.y += 0.003;

    renderer.render(scene, camera);
  }

  function onResize() {
    const newWidth = container.clientWidth;
    const newHeight = container.clientHeight;
    camera.aspect = newWidth / newHeight;
    camera.updateProjectionMatrix();
    renderer.setSize(newWidth, newHeight);
  }

  window.addEventListener('resize', onResize);

  animate();
});
</script>

<style>
.earth-container {
  position: absolute;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  overflow: hidden;
}
#solar-canvas {
  width: 100%;
  height: 100%;
  display: block;
}
</style>
