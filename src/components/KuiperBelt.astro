---
const uniqueId = `asteroid-belt-${Math.random().toString(36).substr(2, 9)}`;
---
<div class="asteroid-container z-100">
    <canvas id={uniqueId} class="asteroid-belt"></canvas>
</div>

<script>
  import * as THREE from 'three';

  document.addEventListener('DOMContentLoaded', () => {
    const canvas = document.querySelector('.asteroid-belt');
    if (!canvas) {
      console.error('Canvas element not found!');
      return;
    }

    let width = window.innerWidth;
    const remToPixels = parseFloat(getComputedStyle(document.documentElement).fontSize);
    const beltHeight = 5 * remToPixels;

    const renderer = new THREE.WebGLRenderer({
      canvas: canvas,
      antialias: true,
      alpha: true
    });
    renderer.setSize(width, beltHeight);
    renderer.setClearColor(0x000000, 0);

    const scene = new THREE.Scene();
    
    const viewHeight = beltHeight / remToPixels;
    const viewWidth = width / remToPixels;
    const camera = new THREE.OrthographicCamera(
      -viewWidth / 2, viewWidth / 2, 
      viewHeight / 2, -viewHeight / 2, 
      1, 1000
    );
    camera.position.z = 100;
    
    // Add lights
    const ambientLight = new THREE.AmbientLight(0x555555);
    scene.add(ambientLight);
    
    const directionalLight = new THREE.DirectionalLight(0xffffff, 0.8);
    directionalLight.position.set(1, 1, 1);
    scene.add(directionalLight);

    // Asteroids array
    const asteroids = [];
    
    // Create asteroids
    function createAsteroids() {
      // Clear existing asteroids if any
      asteroids.forEach(asteroid => scene.remove(asteroid));
      asteroids.length = 0;
      
      // Calculate asteroid density based on width (1 per 20px)
      const asteroidCount = Math.max(30, Math.floor(width / 20));
      
      for (let i = 0; i < asteroidCount; i++) {
        // Random size between 0.4 and 1 rem
        const size = (0.4 + Math.random() * 0.6);
        
        // Choose a random geometry
        let geometry;
        const shapeType = Math.floor(Math.random() * 3);
        
        if (shapeType === 0) {
          geometry = new THREE.DodecahedronGeometry(size, 0);
        } else if (shapeType === 1) {
          geometry = new THREE.TetrahedronGeometry(size, 0);
        } else {
          geometry = new THREE.IcosahedronGeometry(size, 0);
        }
        
        // Make asteroids more irregular
        const positionAttribute = geometry.getAttribute('position');
        const vertex = new THREE.Vector3();
        
        for (let i = 0; i < positionAttribute.count; i++) {
          vertex.fromBufferAttribute(positionAttribute, i);
          // Add some noise to vertex
          vertex.x += (Math.random() - 0.5) * 0.4 * size;
          vertex.y += (Math.random() - 0.5) * 0.4 * size;
          vertex.z += (Math.random() - 0.5) * 0.4 * size;
          positionAttribute.setXYZ(i, vertex.x, vertex.y, vertex.z);
        }
        
        // Random gray material for realistic asteroids
        const grayValue = 0.3 + Math.random() * 0.3; // Between 0.3-0.6
        const material = new THREE.MeshStandardMaterial({
          color: new THREE.Color(grayValue, grayValue * 0.9, grayValue * 0.8),
          roughness: 0.9,
          metalness: 0.1 + Math.random() * 0.3
        });

        const asteroid = new THREE.Mesh(geometry, material);
        
        // Position within belt - spread across entire width
        const halfWidth = viewWidth / 2;
        asteroid.position.x = Math.random() * viewWidth - halfWidth; // Full width distribution
        asteroid.position.y = (Math.random() - 0.5) * 4; // Spread within 4rem vertical space
        asteroid.position.z = (Math.random() - 0.5) * 5;
        
        // Random initial rotation
        asteroid.rotation.x = Math.random() * Math.PI * 2;
        asteroid.rotation.y = Math.random() * Math.PI * 2;
        asteroid.rotation.z = Math.random() * Math.PI * 2;
        
        // Add rotation and movement speeds
        asteroid.userData = {
          rotationSpeed: {
            x: (Math.random() - 0.5) * 0.02,
            y: (Math.random() - 0.5) * 0.02,
            z: (Math.random() - 0.5) * 0.02
          },
          movementSpeed: 0.05 + Math.random() * 0.15 // Rightward speed
        };
        
        scene.add(asteroid);
        asteroids.push(asteroid);
      }
    }

    // Initial creation
    createAsteroids();
    
    // Animation loop
    function animate() {
      requestAnimationFrame(animate);
      
      // Update asteroids
      asteroids.forEach(asteroid => {
        // Rotate asteroid
        asteroid.rotation.x += asteroid.userData.rotationSpeed.x;
        asteroid.rotation.y += asteroid.userData.rotationSpeed.y;
        asteroid.rotation.z += asteroid.userData.rotationSpeed.z;
        
        // Move asteroid to the right
        asteroid.position.x += asteroid.userData.movementSpeed;
        
        // Reset position when out of view
        const halfWidth = viewWidth / 2;
        if (asteroid.position.x > halfWidth) {
          asteroid.position.x = -halfWidth;
          asteroid.position.y = (Math.random() - 0.5) * 4;
          asteroid.position.z = (Math.random() - 0.5) * 5;
        }
      });
      
      renderer.render(scene, camera);
    }
    
    // Handle resize to ensure full width
    function handleResize() {
      width = window.innerWidth;
      
      // Update camera
      const viewHeight = beltHeight / remToPixels;
      const viewWidth = width / remToPixels;
      
      camera.left = -viewWidth / 2;
      camera.right = viewWidth / 2;
      camera.top = viewHeight / 2;
      camera.bottom = -viewHeight / 2;
      camera.updateProjectionMatrix();
      
      // Update renderer
      renderer.setSize(width, beltHeight);
      
      // Recreate asteroids for significant width changes
      if (Math.abs(width - renderer.getSize(new THREE.Vector2()).width) > 100) {
        createAsteroids();
      }
    }
    
    window.addEventListener('resize', handleResize);
    
    // Start animation
    animate();
  });
</script>

<style>
  .asteroid-container {
    height: 5rem; /* Explicitly 5rem height */
    width: 100vw; /* Full viewport width */
    left: 50%;
    overflow: hidden; /* Hide overflow */
  }
  
  .asteroid-belt {
    width: 100%;
    height: 100%;
    display: block;
  }
</style>
